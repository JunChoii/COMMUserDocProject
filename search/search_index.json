{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>This page is to draw and introduce you into the basic idea of Fetch API. It provides users the interface that fetches elements like, responses and requests that organizes HTTP pipeline. You can access and control it from JavaScript. You can also fetch network resources through <code>fetch()</code> method that Fetch API supports.</p>"},{"location":"#introducing-fetch-api","title":"Introducing Fetch API","text":"<p>We used to be able to commit those functionality by using <code>XMLHttpRequest</code>. However, fetch API is much better alternative as well as that easily being used in other different environments.</p>"},{"location":"#background","title":"Background","text":""},{"location":"#why-it-is-necessary","title":"Why it is necessary","text":"<p>Let's say you are doing HTML. You use <code>&lt;a href=\"\"&gt;</code> to give users <code>url</code> to allow them to move to the other page. However, this way causes blinking the window which means it reloads every time user clicks on <code>&lt;a href=\"\"&gt;</code> and also in case you load some huge data from it, it will take long to get it you. Plus, it reloads the whole page every time including the same tag which is not necessary.</p> <p>More than that, JavaScript is single threaded language so it should run the whole things through one thread. To improve such difficulty, <code>Asynchronous</code> communication became important.</p>"},{"location":"#promise","title":"Promise","text":"<p>Promise is an object that JavaScript provides to help you run your code <code>Asynchronously</code>. The reason why Promise showed up here is that it is directly related to network communication and <code>Asynchronous</code> way of coding. Promise run the function that you asked it to, and then, it returns results depending on the function is failed or succeeded. And the result that <code>fetch()</code> returns is promise.</p> <pre><code>const promise = new Promise((resolve, reject) =&gt; {\nconsole.log(\"Want to be a Full Stack Webdeveloper?....Really?\");\nsetTimeout(() =&gt; {\nresolve(\"data\");\n}, 1000);\n});\n</code></pre> <p>In promise, you pass in two parameters in the callback function:</p> <p>resolve - runs the function successfully and returns data. Recieves the result using <code>.then()</code></p> <p>reject - if there is an error running the function, reject is called and get error result using <code>.catch()</code></p>"},{"location":"#fetch-syntax","title":"Fetch Syntax","text":"<pre><code>fetch(url, options)\n.then((response) =&gt; console.log(\"response:\", response))\n.catch((error) =&gt; console.log(\"error:\", error));\n</code></pre> <p>You see the similarity between <code>fetch</code> and <code>promise</code>?</p> <p>Now, in the next page, let's go through how to actually use <code>fetch()</code>.</p>"},{"location":"1.Node%20Version/","title":"1.Node Version","text":"<p>To use Fetch API, you need to make sure your Node.js version is up to date.</p>"},{"location":"1.Node%20Version/#1-checking-your-nodejs-version-in-the-terminal","title":"1. Checking your Node.js version in the terminal","text":""},{"location":"1.Node%20Version/#open-the-terminal-on-your-vs-code-or-other-platform-and-type-run-the-following-command","title":"Open the terminal on your VS Code or other platform and type run the following command:","text":"<pre><code>node -v\n</code></pre> <p>The output should look like this:</p> <p></p> <p>If the version retrieved by the code is under than the version v18.0.0 means that you need to update your Node.js version to run the Fetch API, for the particular reason that the Fetch API functionality was only natively implemented in Node.js in 2015 in that version, so you need the version  v18.0.0 or above.</p>"},{"location":"1.Node%20Version/#2-update-your-nodejs-version-to-the-latest-version-or-the-latest-stable-version-if-needed","title":"2. Update your Node.js version to the latest version or the latest stable version if needed","text":"<p>Choose one of the options of code below and in your terminal type and run one of the following code for the Node.js version that you want:</p>"},{"location":"1.Node%20Version/#latest-stable-version","title":"latest stable version","text":"<pre><code>npm i node@latest\n</code></pre>"},{"location":"1.Node%20Version/#latest-version","title":"latest version","text":"<pre><code>npm i node@lts\n</code></pre> <p>After this you should have the stable or the latest version of Node.js running on your computer.</p>"},{"location":"2.InstallingPackageJson/","title":"2. Installing packages and dependencies","text":""},{"location":"2.InstallingPackageJson/#what-is-a-package","title":"What is a Package?","text":"<p>A package in Node.js contains all the files you need for a module. And the modules are JavaScript libraries you can include in your project. If you are develop student or begginer developer, you should keep in mind that having the latest version of the package should be the first step you need to take.</p>"},{"location":"2.InstallingPackageJson/#what-is-a-dependency","title":"What is a Dependency?","text":"<p>It is a connection between two different modules. It is downloaded from installing <code>npm</code>, and <code>dependencies</code> and <code>devDependencies</code> are listed in the <code>package.json</code>.</p>"},{"location":"2.InstallingPackageJson/#why-do-i-install","title":"Why do I install","text":"<p>When you do your project, the very first step you should take is installing <code>package.json</code>.</p> <p>The package.json file is a repository of descriptive and functional metadata pertaining to a project, including details like its name, version, and required dependencies. This information enables the <code>npm</code> package manager to efficiently manage the project's dependencies and accurately identify it.</p> <p>Especially when you are working on a team project, you are better to have the latest version of <code>package.json</code>. Running <code>npm install</code> will immediately install all the necessary dependencies dependencies for your project.</p> <p>It is very important to do your project however it is very simple command to do it.</p>"},{"location":"2.InstallingPackageJson/#command","title":"Command","text":""},{"location":"2.InstallingPackageJson/#1-first-run-the-following-command","title":"1. First, run the following command:","text":"<pre><code>npm init\n</code></pre> <p>If you run this command, it will ask you some questions and you answer them to move on to the next command.</p>"},{"location":"2.InstallingPackageJson/#2-then-run-the-following-command","title":"2. Then, run the following command:","text":"<pre><code>npm install\n</code></pre> <p>Once you have finished those commands, you should have package.json and <code>node_modules</code> installed. Then, open the <code>package.json</code> and add a line <code>\"type: module\"</code> like the following:</p> <p></p>"},{"location":"3.InstallFetch/","title":"3. Installing Fetch","text":"<p>To install the Fetch API is simple. Using the npm library, utilize the following code in your terminal to install all the node modules necessary to run code that involves the node fetch application:</p> <pre><code>npm install node-fetch\n</code></pre>"},{"location":"3.InstallFetch/#conclusion","title":"Conclusion","text":"<p>The Fetch API is a powerful tool for fetching resources and submitting data in modern web applications. With its flexibility and support for Promises, it's a great alternative to the older XMLHttpRequest method. By installing the necessary dependencies and packages, such as node-fetch, you can easily start using the Fetch API in your Node.js projects.</p> <p>Remember to always keep your packages and dependencies up-to-date to ensure your code is secure and efficient.</p>"},{"location":"4.fetchStructure/","title":"4. Fetch Structure","text":""},{"location":"4.fetchStructure/#how-is-the-structure-of-the-fetch-api","title":"How is the Structure of the Fetch API","text":"<p>A Fetch API is a flexible, powerful, and modern web API for fetching resources and submitting data. As a result, it is built on top of Promises, making handling asynchronous operations easier. And the Fetch API works in both languages even in JavaScript and TypeScript.</p>"},{"location":"4.fetchStructure/#the-structure-is-simple","title":"The structure is simple","text":"<p>In this example of a code that fetches data from the given URL and logs the mapped coordinates to the console:</p> <p>Javascript <pre><code>fetch(\"https://gis.burnaby.ca/arcgis/rest/services/OpenData/OpenData1/MapServer/4/query?where=1%3D1&amp;outFields=*&amp;outSR=4326&amp;f=json\") // here the URL that have the information as JSON \n.then(response =&gt; response.json())//This line processes the fetch response by parsing its JSON content\n.then(data =&gt; {\nconst coordinates = data.features.map(feature =&gt; { const { x, y } = feature.geometry;// what do you want to get from the JSON\nreturn { x, y };\n});\nconsole.log(coordinates);\n})\n.catch(error =&gt; console.log('Error', error));// catch the error and console.log to the terminal\n</code></pre> Following the same parameters with one only difference that is the interface necessary the retrieves only the x, y coordinates </p> <p>For TypeScript <pre><code>fetch(\"https://gis.burnaby.ca/arcgis/rest/services/OpenData/OpenData1/MapServer/4/query?where=1%3D1&amp;outFields=*&amp;outSR=4326&amp;f=json\")\n.then((response:Response )=&gt; response.json())\n.then((data:{features: FetchOptions []}) =&gt;{ //here is where needs to insert the interface \nconst FetchOptions = data.features.map((feature: any) =&gt; {\nconst { x, y } = feature.geometry;\nreturn { x, y };\n});\nconsole.log(FetchOptions);\n})\n.catch((error:Error) =&gt; console.log('Error',error))\n```\n The result expected in both occasions \n```powershell\n[\n{ x: -122.93530746457441, y: 49.22444515831069 },\n{ x: -122.98023238794687, y: 49.28149990455084 },\n{ x: -122.94588551803342, y: 49.22418532057695 },\n{ x: -122.97649442753776, y: 49.26846567866385 },\n{ x: -122.9359172420811, y: 49.25189226306783 },\n{ x: -122.99951351057413, y: 49.276951828324535 },\n{ x: -122.90315773565258, y: 49.25919563737326 },\n{ x: -123.01559615302813, y: 49.27254167567406 },\n{ x: -122.8970191986001, y: 49.25235324147256 },\n{ x: -122.90824298333912, y: 49.27801211384696 },\n{ x: -123.00680197233488, y: 49.21535415980713 },\n{ x: -122.95980113840653, y: 49.20761483938699 },\n{ x: -122.97553997083043, y: 49.246332873529326 },\n{ x: -123.02254962081739, y: 49.23663810735596 },\n{ x: -122.9177353949887, y: 49.2651568106083 },\n{ x: -123.02091261054795, y: 49.24597377066418 },...]\n</code></pre></p>"},{"location":"4.fetchStructure/#conclusion","title":"Conclusion","text":"<p>In conclusion, the Fetch API is a powerful and modern web API that makes it easy to fetch resources and submit data. It is built on top of Promises and works well with both JavaScript and TypeScript. With its simple structure, it is easy to use and can be customized to suit a variety of use cases. By installing the necessary dependencies and understanding the basic structure of the Fetch API, developers can create powerful and efficient applications that work seamlessly with the web.\ud83d\ude01</p>"},{"location":"glossary/","title":"Glossary","text":""},{"location":"glossary/#glossary","title":"Glossary","text":"Term Definition Fetch A method in the Fetch API used to initiate a request for a resource from a server. Response An object representing the response returned from the server after a Fetch request. Request An object representing the request that will be sent to the server with Fetch. Body The content of the request or response, which can be in a variety of formats including JSON, FormData, or Blob. Headers An object representing the HTTP headers associated with a Fetch request or response. CORS Cross-Origin Resource Sharing, a security feature implemented by web browsers to restrict access to resources from different origins. Cache A mechanism used by the browser to store responses from previous requests for faster access. Promise An object representing the eventual completion or failure of an asynchronous operation. async/await A syntax for writing asynchronous code in a synchronous style using Promises. Blob A data type representing binary data in JavaScript, commonly used for images or other files. FormData An object representing a set of key/value pairs to be sent in the body of a Fetch request, commonly used for submitting form data. JSON JavaScript Object Notation, a lightweight data interchange format often used for data exchange between a client and server. URL Uniform Resource Locator, a string that specifies the location of a resource on the internet, often used as a target for a Fetch request. Dependency A connection between two different modules, downloaded from installing <code>npm</code>, and listed in the <code>package.json</code>. Package A collection of files needed for a module, including JavaScript libraries that can be included in a project."}]}